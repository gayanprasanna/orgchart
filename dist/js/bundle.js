!function(){"use strict";angular.module("orgChart",[])}(),function(){"use strict";function e(e,n,t){function o(o){function i(e){var n=angular.lowercase(e);return function(e){return 0===e.displayLowerCase.indexOf(n)}}var a=this;a.simulateQuery=!1,a.isDisabled=!1,a.noCache=!0,a.states=[{value:{name:"PublisherNameLongName",id:"id1",type:"type0",addable:!1,editable:!1,removable:!1,enableble:!1},display:"PublisherNameLongName",displayLowerCase:"PublisherNameLongName".toLowerCase()},{value:{name:"Landing A",id:"id2",type:"type1",addable:!0,editable:!0,removable:!0,enablable:!0,enable:!1},display:"Landing A",displayLowerCase:"Landing A".toLowerCase()},{value:{name:"Account 1",id:"id3",type:"type2"},display:"Account 1",displayLowerCase:"Account 1".toLowerCase()},{value:{name:"Landing B",id:"id8",type:"type1"},display:"Landing B",displayLowerCase:"Landing B".toLowerCase()}],a.querySearch=function(t){var o,c=t?a.states.filter(i(t)):a.states;return a.simulateQuery?(o=n.defer(),e(function(){o.resolve(c)},1e3*Math.random(),!1),o.promise):c},a.selectedItemChange=function(e){e&&(t.info("Item changed to "+JSON.stringify(e)),o.setSearchedNode(e.value))},a.searchTextChange=function(e){t.info("Text changed to "+e)},a.newState=function(e){alert("Sorry! You'll need to create a Constitution for "+e+" first!")}}return o.$inject=["treeViewService"],{replace:!1,restrict:"EA",controller:o,template:'<div layout-align="start center" layout="row" layout-fill> <div flex-offset="5"> <md-autocomplete style="margin-top: 20px" ng-disabled="vm.isDisabled" md-no-cache="vm.noCache" md-selected-item="vm.selectedItem" md-search-text-change="vm.searchTextChange(vm.searchText)" md-search-text="vm.searchText" md-selected-item-change="vm.selectedItemChange(item)" md-items="item in vm.querySearch(vm.searchText)" md-item-text="item.display" md-min-length="0" placeholder="Search People"> <md-item-template> <span md-highlight-text="ctrl.searchText" md-highlight-flags="^i">{{item.display}}</span> </md-item-template> <md-not-found> No states matching "{{ctrl.searchText}}" were found. <a ng-click="ctrl.newState(ctrl.searchText)">Create a new one!</a> </md-not-found> </md-autocomplete> </div></div>',controllerAs:"vm",scope:{},bindToController:{},link:function(){}}}e.$inject=["$timeout","$q","$log"],angular.module("orgChart").directive("cascadeTreeSearchBox",e)}(),function(){"use strict";function e(e){var n=this;n.isExpandAllMode=e.isExpandAllMode(),n.toggleExpandAllMode=function(){n.isExpandAllMode=e.toggleExpandAllMode()},n.incrementZoomScale=function(){n.zoomScale=e.incrementZoomScale()},n.decrementZoomScale=function(){n.zoomScale=e.decrementZoomScale()},n.zoomScale=e.getZoomScale()}e.$inject=["toolSetService"],angular.module("orgChart").directive("cascadeToolSet",function(){return{replace:!1,restrict:"EA",controller:e,controllerAs:"vm",template:'<div layout="column" layout-align="center end"> <div layout="row" layout-align="space-around center" style="margin-top: 20px" flex-offset="5"> <div> <md-button class="md-icon-button" ng-click="vm.incrementZoomScale()"> <md-tooltip md-direction="bottom">Zoom In</md-tooltip> <md-icon md-font-icon="zmdi zmdi-plus"></md-icon></md-button> </div><div> <md-button class="md-icon-button" ng-click="vm.decrementZoomScale()" ng-disabled="vm.zoomScale<=1"> <md-tooltip md-direction="bottom">Zoom Out</md-tooltip> <md-icon md-font-icon="zmdi zmdi-minus"></md-icon></md-button> </div><div> <md-button class="md-icon-button" ng-hide="vm.isExpandAllMode" ng-click="vm.toggleExpandAllMode()"> <md-tooltip md-direction="bottom">Expand All</md-tooltip> <md-icon md-font-icon="zmdi zmdi-triangle-down"></md-icon></md-button> </div><div> <md-button class="md-icon-button" ng-show="vm.isExpandAllMode" ng-click="vm.toggleExpandAllMode()"> <md-tooltip md-direction="bottom">Collapse All</md-tooltip> <md-icon md-font-icon="zmdi zmdi-triangle-up"></md-icon></md-button> </div></div></div>',scope:{},bindToController:{},link:function(e,n,t,o){}}})}(),function(){"use strict";angular.module("orgChart").factory("toolSetService",function(){var e=!1,n=1;return{isExpandAllMode:function(){return e},toggleExpandAllMode:function(){return e=!e},getZoomScale:function(){return n},setZoomScale:function(e){n=e,console.log("zoom scale",n)},incrementZoomScale:function(){return n+=.1},decrementZoomScale:function(){return n>1&&(n-=.1),n}}})}(),function(){"use strict";function e(e,t,o,i){return{restrict:"E",replace:!1,controller:n,template:'<div ng-class="{\'active-node\':vm.isActive}" class="{{vm.nodeClass}}" ng-mouseenter="vm.whenMouseEnter()" ng-mouseleave="vm.whenMouseLeave()" ng-click="vm.makeNodeActive()"> <div layout="column" layout-align="center center"> <div class="md-subhead">Some Text</div><div> <div class=""><img ng-src="assets/images/avatars/flasher.thumb.jpg" class="round-chip"></div></div><div class="md-subhead">{{vm.node.name}}</div><div layout-align="center center" layout-fill class="action-area" layout="row" ng-show="vm.isExpandedView"> <div ng-repeat="action in vm.nodeActions"><button ng-click="vm.makeCallBack(action.callBack)"><span ng-bind="action.name"></span>&nbsp;<i class="{{action.icon}}"></i></button></div></div></div></div>',controllerAs:"vm",scope:{},bindToController:{nodeId:"@",nodeActions:"@"},link:function(n,t,a,c){function l(){i.$broadcast("app:nodes:clearactive",{data:""})}function r(e){t===e.target||t[0].contains(e.target)||n.$apply(function(){c.isActive=!1})}c.id=a.nodeid,c.nodeActions=angular.fromJson(a.nodeactions),console.log(c.nodeActions),c.isPinnedNode=!1,c.node=e.findById(a.nodeid),c.nodeClass="node-label node-"+c.node.type+" node-"+c.id,c.isExpandedView=!1,c.isActive=!1,c.whenMouseEnter=function(){console.log("mouse Entered"),c.isExpandedView=!0},c.whenMouseLeave=function(){console.log("mouse leaved"),c.isExpandedView=!1},c.togglePinnedMode=function(){c.isPinnedNode=!0,console.log(c.isPinnedNode)},c.makeCallBack=function(e){console.log(e),n.$parent.vm.makeCallBack(e)},c.makeNodeActive=function(){l(),c.isActive=!0};angular.element(t.children()[0]);o.on("click",r),n.$on("$destroy",function(){o.off("click",r)})}}}function n(e){}e.$inject=["treeViewService","$timeout","$document","$rootScope"],n.$inject=["treeViewService"],angular.module("orgChart").directive("cascadeTreeNode",e)}(),function(){"use strict";function e(e,t,o,i,a,c){return{replace:"false",restrict:"E",scope:{},bindToController:{data:"=",abn:"&",nodeActions:"@"},controller:n,controllerAs:"vm",link:function(n,l,r,d){function s(){m(),f(),u()}function u(){n.$watch(function(){return a.isExpandAllMode()},function(e){e?g():y()})}function m(){n.$watch(function(){return o.getSearchedNode()},function(e){if(console.log(e),e){w(e);var n=_(e);L(),i(function(){console.log(n.x,n.y),M(),z(n.id),N(n)},500)}})}function f(){n.$watch(function(){return a.getZoomScale()},function(e){console.log(e),D.transition().duration(750).call(R.translate([150,100]).scale(e).scaleExtent([1,8]).event)})}function v(e){e.children&&(e.children.forEach(v),x(e))}function p(e){var n=e.children?e.children:e._children;e._children&&(e.children=e._children,e._children=null),n&&n.forEach(p)}function h(e){var n=e.children?e.children:e._children;e.children&&(e._children=e.children,e.children=null),n&&n.forEach(h)}function g(){p(T),b(T)}function y(){h(T),b(T)}function b(e){var i=d3.event&&d3.event.altKey?5e3:500,a=J.nodes(T).reverse();a.forEach(function(e){e.y=200*e.depth});var c=D.selectAll("g.node").data(a,function(e){return e.id||(e.id=++I)}),l=c.enter().append("svg:g").attr("class","node").attr("id",function(e){return"node-"+e.id}).attr("transform",function(n){return"translate("+e.x0+","+e.y0+")"}).on("click",function(e){d3.event.defaultPrevented||(x(e),b(e),e.info&&playvid(e.info))});l.append("svg:circle").attr("r",1e-6).style("fill",function(e){return e._children?"lightsteelblue":"#fff"}),l.append("svg:foreignObject").attr("y",-30).attr("x",-5).attr("text-anchor",function(e){return e.children||e._children?"end":"start"}).style("fill-opacity",1e-6).attr("width",160).attr("height",120).append("xhtml:div").classed("disabled",function(e){return void 0!==e.enable&&!e.enable}).on("click",A).append("cascade-tree-node").attr("node",function(e){return o.pushNode(e),""}).attr("nodeId",function(e){return e.id}).attr("isPinnedNode","false").attr("nodeActions",r.nodeactions).each(function(){t(this)(n)});var d=c.transition().duration(i).attr("transform",function(e){return"translate("+e.x+","+e.y+")"});d.select("circle").attr("r",4.5).style("fill",function(e){return"highlight-link"===e.class?"#ff4136":e._children?"lightsteelblue":"#fff"}),d.select("text").style("fill-opacity",1);var s=c.exit().transition().duration(i).attr("transform",function(n){return"translate("+e.x+","+e.y+")"}).remove();s.select("circle").attr("r",1e-6),s.select("text").style("fill-opacity",1e-6);var u=D.selectAll("path.link").data(J.links(a),function(e){return e.target.id});u.enter().insert("svg:path","g").attr("class","link").attr("d",function(n){var t={x:e.x0,y:e.y0};return Q({source:t,target:t})}).transition().duration(i).attr("d",Q),u.transition().duration(i).attr("d",Q).style("stroke",function(e){if("highlight-link"===e.target.class)return"#ff4136"}),u.exit().transition().duration(i).attr("d",function(n){var t={x:e.x,y:e.y};return Q({source:t,target:t})}).remove(),a.forEach(function(e){e.x0=e.x,e.y0=e.y})}function x(e){e.children?(e._children=e.children,e.children=null):(e.children=e._children,e._children=null)}function S(){d3.event.stopPropagation()}function A(e){d3.event.defaultPrevented||(console.log(e),$(this)||N(e))}function w(e){var n=E(Z,e.name,[]);angular.isDefined(n)?(C(q),k(n)):console.log("Searched node "+e.name+" not found"),q=n}function k(e){angular.forEach(e,function(e,n){e.class="highlight-link",e._children&&(e.children=e._children,e._children=null),b(e)})}function C(e){angular.forEach(e,function(e,n){e.class="",e._children&&(e.children=e._children,e._children=null),b(e)})}function E(e,n,t){if(e.name===n)return t.push(e),t;if(!e.children&&!e._children)return!1;for(var o=e.children?e.children:e._children,i=0;i<o.length;i++){t.push(e);var a=E(o[i],n,t);if(a)return a;t.pop()}}function $(e){var n=!1;return K.node()===e&&(n=L()),!!n||(K.classed("active",!1),K=d3.select(e).classed("active",!0),!1)}function N(e){var n=[e.x/2-1*e.x,e.y/2-1*e.y];D.transition().duration(1250).call(R.translate(n).scale(1).event)}function L(){return console.log("reset called"),K.classed("active",!1),K=d3.select(null),D.transition().duration(750).call(R.translate([150,100]).scale(1).event),!0}function _(n){return e("filter")(P,{id:n.id},!0)[0]}function z(e){var n=d3.selectAll(".node-"+e.toString());angular.element(n[0]).addClass("active-node")}function M(){var e=d3.selectAll(".node-label");angular.forEach(e,function(e,n){angular.element(e).removeClass("active-node")})}var T,Z={name:"RootNode",id:"id1",type:"type0",addable:!1,editable:!1,removable:!1,enableble:!1,root:!0,children:[{name:"Landing A",id:"id2",type:"type1",addable:!0,editable:!0,removable:!0,enablable:!0,enable:!1,children:[{name:"Account 1",id:"id3",type:"type2",children:[{name:"tracking link 1",id:"id4",type:"type3",enablable:!0,enable:!0},{name:"tracking link 2",id:"id5",type:"type3",enablable:!0,enable:!0},{name:"tracking link 3",id:"id6",type:"type3",enablable:!0,enable:!1}]},{name:"Account 2",id:"id7",type:"type2"},{name:"Account 3",id:"id9",type:"type2"}]},{name:"Landing B",id:"id8",type:"type1",children:[{name:"Account 4",id:"id10",type:"type2"},{name:"Account 5",id:"id11",type:"type2"},{name:"Account 6",id:"id12",type:"type2"}]},{name:"Landing C",id:"id13",type:"type1",children:[{name:"Subtopic 7",id:"id14",type:"type3"},{name:"Subtopic 8",id:"id15",type:"type3"},{name:"Subtopic 9",id:"id16",type:"type3"}]}]},P=[],B=[20,20,20,20],j=c.innerWidth-20-B[1]-B[3],V=600-B[0]-B[2],I=0,O=(d3.scale.linear().domain([0,j]).range([0,j]),d3.scale.linear().domain([0,V]).range([0,V]),d3.select(l[0])),q=[];l.append(t('<div layout="row" layout-align="space-around center"><div flex><cascade-tree-search-box></cascade-tree-search-box></div><div flex><cascade-tool-set></cascade-tool-set></div></div>')(n)),s();var D=O.append("div").attr("layout","row").attr("layout-align","space-around center").call(function(){t(this[0])(n)}).append("div").attr("flex","").call(function(){t(this[0])(n)}).append("svg:svg").attr("viewBox","0 0 600 600").attr("width",j+B[1]+B[3]).attr("height",V+B[0]+B[2]).append("svg:g").attr("transform","translate("+B[3]+","+B[0]+")").call(d3.behavior.zoom().on("zoom",function(){a.setZoomScale(d3.event.scale),n.$apply(),console.log(d3.event.scale),D.attr("transform","translate("+d3.event.translate+")")})).on("click",S,!1).call(d3.behavior.drag().on("dragstart",function(){d3.event.sourceEvent.stopPropagation()}).on("drag",function(){console.log("dragged"),d3.event.sourceEvent.stopPropagation()})).append("g").attr("width",160).attr("height",120).attr("class","tree-holder"),J=d3.layout.tree().size([V,j]).nodeSize([110,60]).separation(function(e,n){return e.parent,n.parent,2}),Q=d3.svg.diagonal().projection(function(e){return[e.x+80,e.y+80]});(T=Z).x0=V/2,T.y0=0,console.log(T),T.children.forEach(v),b(T);var K=d3.select(null),R=d3.behavior.zoom().translate([0,0]).scale(1).scaleExtent([1,8]).on("zoom",function(){D.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")});n.$on("app:nodes:clearactive",function(e,n){M()}),n.$on("$destroy",function(){})}}}function n(e,n,t){this.makeCallBack=function(e){console.log("called treeview call back abn"),n.vm[e]()}}e.$inject=["$filter","$compile","treeViewService","$timeout","toolSetService","$window"],n.$inject=["$rootScope","$scope","treeViewService"],angular.module("orgChart").directive("cascadeTreeView",e)}(),function(){"use strict";function e(e){var n=null,t=[];return{setSearchedNode:function(e){n=e},getSearchedNode:function(){return n},setNodes:function(e){t=e},pushNode:function(e){t.push(e)},getNodes:function(){return t},findById:function(n){return e("filter")(t,{id:n},!0)[0]}}}e.$inject=["$filter"],angular.module("orgChart").factory("treeViewService",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
