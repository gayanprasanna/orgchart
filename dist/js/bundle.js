!function(){"use strict";angular.module("orgChart",[])}(),function(){"use strict";function e(e,t,n){function o(o){function i(e){var t=angular.lowercase(e);return function(e){return 0===e.displayLowerCase.indexOf(t)}}var a=this;a.simulateQuery=!1,a.isDisabled=!1,a.noCache=!0,a.states=[{value:{name:"PublisherNameLongName",id:"id1",type:"type0",addable:!1,editable:!1,removable:!1,enableble:!1},display:"PublisherNameLongName",displayLowerCase:"PublisherNameLongName".toLowerCase()},{value:{name:"Landing A",id:"id2",type:"type1",addable:!0,editable:!0,removable:!0,enablable:!0,enable:!1},display:"Landing A",displayLowerCase:"Landing A".toLowerCase()},{value:{name:"Account 1",id:"id3",type:"type2"},display:"Account 1",displayLowerCase:"Account 1".toLowerCase()},{value:{name:"Landing B",id:"id8",type:"type1"},display:"Landing B",displayLowerCase:"Landing B".toLowerCase()}],a.querySearch=function(n){var o,r=n?a.states.filter(i(n)):a.states;return a.simulateQuery?(o=t.defer(),e(function(){o.resolve(r)},1e3*Math.random(),!1),o.promise):r},a.selectedItemChange=function(e){e&&(n.info("Item changed to "+JSON.stringify(e)),o.setSearchedNode(e.value))},a.searchTextChange=function(e){n.info("Text changed to "+e)},a.newState=function(e){alert("Sorry! You'll need to create a Constitution for "+e+" first!")}}return o.$inject=["treeViewService"],{replace:!1,restrict:"EA",controller:o,template:'<div layout-align="start center" layout="row" layout-fill> <div flex-offset="5"> <md-autocomplete style="margin-top: 20px" ng-disabled="vm.isDisabled" md-no-cache="vm.noCache" md-selected-item="vm.selectedItem" md-search-text-change="vm.searchTextChange(vm.searchText)" md-search-text="vm.searchText" md-selected-item-change="vm.selectedItemChange(item)" md-items="item in vm.querySearch(vm.searchText)" md-item-text="item.display" md-min-length="0" placeholder="Search People"> <md-item-template> <span md-highlight-text="ctrl.searchText" md-highlight-flags="^i">{{item.display}}</span> </md-item-template> <md-not-found> No states matching "{{ctrl.searchText}}" were found. <a ng-click="ctrl.newState(ctrl.searchText)">Create a new one!</a> </md-not-found> </md-autocomplete> </div></div>',controllerAs:"vm",scope:{},bindToController:{},link:function(){}}}e.$inject=["$timeout","$q","$log"],angular.module("orgChart").directive("treeSearchBox",e)}(),function(){"use strict";function e(e){var t=this;t.isExpandAllMode=e.isExpandAllMode(),t.toggleExpandAllMode=function(){t.isExpandAllMode=e.toggleExpandAllMode()},t.incrementZoomScale=function(){t.zoomScale=e.incrementZoomScale()},t.decrementZoomScale=function(){t.zoomScale=e.decrementZoomScale()},t.zoomScale=e.getZoomScale()}e.$inject=["toolSetService"],angular.module("orgChart").directive("treeToolSet",function(){return{replace:!1,restrict:"EA",controller:e,controllerAs:"vm",template:'<div layout="column" layout-align="center end"> <div layout="column" layout-align="space-around center" class="toolset-wrapper" flex-offset="5"> <div> <button class="toolset-btn upper-rounded" ng-click="vm.incrementZoomScale()"> <md-tooltip md-direction="bottom">Zoom In</md-tooltip> <md-icon md-font-icon="zmdi zmdi-plus"></md-icon></button> </div><div> <button class="toolset-btn lower-rounded" ng-click="vm.decrementZoomScale()" ng-disabled="vm.zoomScale<=1"> <md-tooltip md-direction="bottom">Zoom Out</md-tooltip> <md-icon md-font-icon="zmdi zmdi-minus"></md-icon></button> </div><div style="margin-top: 10px"> <button class="toolset-btn" ng-hide="vm.isExpandAllMode" ng-click="vm.toggleExpandAllMode()"> <md-tooltip md-direction="bottom">Expand All</md-tooltip> <md-icon md-font-icon="fa fa-expand"></md-icon></button> </div><div> <button class="toolset-btn" ng-show="vm.isExpandAllMode" ng-click="vm.toggleExpandAllMode()"> <md-tooltip md-direction="bottom">Collapse All</md-tooltip> <md-icon md-font-icon="fa fa-compress"></md-icon></button> </div></div></div>',scope:{},bindToController:{},link:function(e,t,n,o){}}})}(),function(){"use strict";angular.module("orgChart").factory("toolSetService",function(){var e=!1,t=1;return{isExpandAllMode:function(){return e},toggleExpandAllMode:function(){return e=!e},getZoomScale:function(){return t},setZoomScale:function(e){t=e,console.log("zoom scale",t)},incrementZoomScale:function(){return t+=.1},decrementZoomScale:function(){return t>1&&(t-=.1),t}}})}(),function(){"use strict";function e(e,n,o,i){return{restrict:"E",replace:!1,controller:t,template:'<div ng-class="{\'active-node\':vm.isActive}" class="{{vm.nodeClass}}" ng-mouseenter="vm.whenMouseEnter()" ng-mouseleave="vm.whenMouseLeave()" ng-click="vm.makeNodeActive()"> <div layout="column" layout-align="center center"> <div class="md-subhead node-text-main">CEO</div><div> <div class="round-chip-wrapper"><img ng-src="assets/images/avatars/flasher.thumb.jpg" class="round-chip"></div></div><div class="md-subhead node-text-sub">{{vm.node.name}}</div><div layout-align="center center" layout-fill layout="row"> <div ng-repeat="action in vm.nodeActions"><button ng-click="vm.makeCallBack(action.callBack)" class="action-btn"><span></span>&nbsp;<i class="{{action.icon}}"></i></button></div></div></div></div>',controllerAs:"vm",scope:{},bindToController:{nodeId:"@",nodeActions:"@"},link:function(t,n,a,r){function l(){i.$broadcast("app:nodes:clearactive",{data:""})}function c(e){n===e.target||n[0].contains(e.target)||t.$apply(function(){r.isActive=!1})}r.id=a.nodeid,r.nodeActions=angular.fromJson(a.nodeactions),console.log(r.nodeActions),r.isPinnedNode=!1,r.node=e.findById(a.nodeid),r.nodeClass="node-label node-"+r.node.type+" node-"+r.id,r.isExpandedView=!1,r.isActive=!1,r.whenMouseEnter=function(){console.log("mouse Entered")},r.whenMouseLeave=function(){console.log("mouse leaved")},r.togglePinnedMode=function(){r.isPinnedNode=!0,console.log(r.isPinnedNode)},r.makeCallBack=function(e){console.log(e),t.$parent.vm.makeCallBack(e)},r.makeNodeActive=function(){l(),r.isActive=!0};angular.element(n.children()[0]);o.on("click",c),t.$on("$destroy",function(){o.off("click",c)})}}}function t(e){}e.$inject=["treeViewService","$timeout","$document","$rootScope"],t.$inject=["treeViewService"],angular.module("orgChart").directive("treeNode",e)}(),function(){"use strict";function e(e,n,o,i,a,r){return{replace:"false",restrict:"E",scope:{},bindToController:{data:"=",abn:"&",del:"&",nodeActions:"@",treedata:"="},controller:t,controllerAs:"vm",link:function(t,l,c,d){function s(){m(),f(),u()}function u(){t.$watch(function(){return a.isExpandAllMode()},function(e){e?p():y()})}function m(){t.$watch(function(){return o.getSearchedNode()},function(e){if(console.log(e),e){A(e);var t=_(e);L(),i(function(){console.log(t.x,t.y),M(),z(t.id),N(t)},500)}})}function f(){t.$watch(function(){return a.getZoomScale()},function(e){console.log(e),Q.transition().duration(750).call(F.translate([150,100]).scale(e).scaleExtent([1,8]).event)})}function h(e){e.children&&(e.children.forEach(h),b(e))}function v(e){var t=e.children?e.children:e._children;e._children&&(e.children=e._children,e._children=null),t&&t.forEach(v)}function g(e){var t=e.children?e.children:e._children;e.children&&(e._children=e.children,e.children=null),t&&t.forEach(g)}function p(){v(T),x(T)}function y(){g(T),x(T)}function x(e){var i=d3.event&&d3.event.altKey?5e3:500,a=K.nodes(T).reverse();a.forEach(function(e){e.y=300*e.depth});var r=Q.selectAll("g.node").data(a,function(e){return e.id||(e.id=++q)});r.enter().append("svg:g").attr("class","node").attr("id",function(e){return"node-"+e.id}).attr("transform",function(t){return"translate("+e.x0+","+e.y0+")"}).on("click",function(e){d3.event.defaultPrevented||(b(e),x(e),e.info&&playvid(e.info))}).append("svg:foreignObject").attr("text-anchor",function(e){return e.children||e._children?"end":"start"}).style("fill-opacity",1e-6).attr("width",B.width).attr("height",B.height).append("xhtml:div").classed("disabled",function(e){return void 0!==e.enable&&!e.enable}).on("click",w).append("tree-node").attr("node",function(e){return o.pushNode(e),""}).attr("nodeId",function(e){return e.id}).attr("isPinnedNode","false").attr("nodeActions",c.nodeactions).each(function(){n(this)(t)});var l=r.transition().duration(i).attr("transform",function(e){return"translate("+e.x+","+e.y+")"});l.select("circle").attr("r",4.5).style("fill",function(e){return"highlight-link"===e.class?"#ff4136":e._children?"lightsteelblue":"#fff"}),l.select("text").style("fill-opacity",1);var d=r.exit().transition().duration(i).attr("transform",function(t){return"translate("+e.x+","+e.y+")"}).remove();d.select("circle").attr("r",1e-6),d.select("text").style("fill-opacity",1e-6);var s=Q.selectAll("path.link").data(K.links(a),function(e){return e.target.id});s.enter().insert("svg:path","g").attr("class","link").attr("d",function(t){var n={x:e.x0,y:e.y0};return W({source:n,target:n})}).transition().duration(i).attr("d",W),s.transition().duration(i).attr("d",W).style("stroke",function(e){if("highlight-link"===e.target.class)return"#ff4136"}),s.exit().transition().duration(i).attr("d",function(t){var n={x:e.x,y:e.y};return W({source:n,target:n})}).remove(),a.forEach(function(e){e.x0=e.x,e.y0=e.y})}function b(e){e.children?(e._children=e.children,e.children=null):(e.children=e._children,e._children=null)}function S(){d3.event.stopPropagation()}function w(e){d3.event.defaultPrevented||(console.log(e),$(this)||N(e))}function A(e){var t=E(d.treedata,e.name,[]);angular.isDefined(t)?(k(J),C(t)):console.log("Searched node "+e.name+" not found"),J=t}function C(e){angular.forEach(e,function(e,t){e.class="highlight-link",e._children&&(e.children=e._children,e._children=null),x(e)})}function k(e){angular.forEach(e,function(e,t){e.class="",e._children&&(e.children=e._children,e._children=null),x(e)})}function E(e,t,n){if(e.name===t)return n.push(e),n;if(!e.children&&!e._children)return!1;for(var o=e.children?e.children:e._children,i=0;i<o.length;i++){n.push(e);var a=E(o[i],t,n);if(a)return a;n.pop()}}function $(e){var t=!1;return Y.node()===e&&(t=L()),!!t||(Y.classed("active",!1),Y=d3.select(e).classed("active",!0),!1)}function N(e){var t=[e.x/2-1*e.x,e.y/2-1*e.y];Q.transition().duration(1250).call(F.translate(t).scale(1).event)}function L(){return console.log("reset called"),Y.classed("active",!1),Y=d3.select(null),Q.transition().duration(750).call(F.translate([150,100]).scale(1).event),!0}function _(t){return e("filter")(j,{id:t.id},!0)[0]}function z(e){var t=d3.selectAll(".node-"+e.toString());angular.element(t[0]).addClass("active-node")}function M(){var e=d3.selectAll(".node-label");angular.forEach(e,function(e,t){angular.element(e).removeClass("active-node")})}var Z,P,T,B={width:240,height:146,horizontalSeperation:16,verticalSeperation:128},j=[],I=[20,20,20,20],V=r.innerWidth-20-I[1]-I[3],O=600-I[0]-I[2],q=0,D=(d3.scale.linear().domain([0,V]).range([0,V]),d3.scale.linear().domain([0,O]).range([0,O]),d3.select(l[0])),J=[];l.append(n('<div layout="row" layout-align="space-around center"><div flex><tree-search-box></tree-search-box></div><div flex><tree-tool-set></tree-tool-set></div></div>')(t)),s();var Q=D.append("div").attr("layout","row").attr("layout-align","space-around center").call(function(){n(this[0])(t)}).append("div").attr("flex","").call(function(){n(this[0])(t)}).append("svg:svg").attr("viewBox","0 0 600 600").attr("width",V+I[1]+I[3]).attr("height",O+I[0]+I[2]).append("svg:g").attr("transform","translate("+I[3]+","+I[0]+")").call(d3.behavior.zoom().on("zoom",function(){a.setZoomScale(d3.event.scale),t.$apply(),console.log(d3.event.scale),Q.attr("transform","translate("+d3.event.translate+")")})).on("click",S,!1).call(d3.behavior.drag().on("dragstart",function(){d3.event.sourceEvent.stopPropagation()}).on("drag",function(){console.log("dragged"),d3.event.sourceEvent.stopPropagation()})).append("g").attr("width",160).attr("height",120).attr("class","tree-holder"),K=d3.layout.tree().nodeSize([B.width+B.horizontalSeperation,B.height+B.verticalSeperation]).separation(function(e,t){return e.parent==t.parent?1.25:1.5}),W=d3.svg.diagonal().source(function(e){return{x:e.source.x+(B.width+B.horizontalSeperation)/2,y:e.source.y+(B.height+10)}}).target(function(e){return{x:e.target.x+(B.width+B.horizontalSeperation)/2,y:e.target.y-45}}).projection(function(e){return[e.x+0,e.y+0]});(T=d.treedata).x0=O/2,T.y0=0,console.log(T),T.children.forEach(h),x(T);var Y=d3.select(null),F=d3.behavior.zoom().translate([0,0]).scale(1).scaleExtent([1,8]).on("zoom",function(){Q.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")});Z=t.$on("app:nodes:clearactive",function(e,t){M()}),P=t.$on("app:nodes:delete",function(e,t){console.log(t)}),t.$on("$destroy",function(){Z(),P()})}}}function t(e,t,n){this.makeCallBack=function(e){console.log("called treeview call back abn"),t.vm[e]()}}e.$inject=["$filter","$compile","treeViewService","$timeout","toolSetService","$window"],t.$inject=["$rootScope","$scope","treeViewService"],angular.module("orgChart").directive("treeView",e)}(),function(){"use strict";function e(e){var t=null,n=[];return{setSearchedNode:function(e){t=e},getSearchedNode:function(){return t},setNodes:function(e){n=e},pushNode:function(e){n.push(e)},getNodes:function(){return n},findById:function(t){return e("filter")(n,{id:t},!0)[0]}}}e.$inject=["$filter"],angular.module("orgChart").factory("treeViewService",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
