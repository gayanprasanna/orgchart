!function(){"use strict";angular.module("orgChart",[])}(),function(){"use strict";function e(e,t,n){function o(o){function r(e){var t=angular.lowercase(e);return function(e){return 0===e.name.toLowerCase().indexOf(t)}}var i=this;i.simulateQuery=!1,i.isDisabled=!1,i.noCache=!0,i.querySearch=function(n){console.log(i.searchableList);var o,a=n?i.searchableList.filter(r(n)):i.searchableList;return i.simulateQuery?(o=t.defer(),e(function(){o.resolve(a)},1e3*Math.random(),!1),o.promise):a},i.selectedItemChange=function(e){e&&(n.info("Item changed to "+JSON.stringify(e)),o.setSearchedNode(e))},i.searchTextChange=function(e){n.info("Text changed to "+e)},i.newState=function(e){alert("Sorry! You'll need to create a Constitution for "+e+" first!")}}return o.$inject=["treeViewService"],{replace:!1,restrict:"EA",controller:o,template:'<div layout-align="start center" layout="row" layout-fill> <div flex-offset="5" class="search-box-holder"> <md-autocomplete ng-disabled="vm.isDisabled" md-no-cache="vm.noCache" md-selected-item="vm.selectedItem" md-search-text-change="vm.searchTextChange(vm.searchText)" md-search-text="vm.searchText" md-selected-item-change="vm.selectedItemChange(item)" md-items="item in vm.querySearch(vm.searchText)" md-item-text="item.name" md-min-length="0" placeholder="Search People" class="auto-complete-custom"> <md-item-template> <span md-highlight-text="ctrl.searchText" md-highlight-flags="^i">{{item.name}}</span> </md-item-template> <md-not-found> No states matching "{{ctrl.searchText}}" were found. <a ng-click="ctrl.newState(ctrl.searchText)">Create a new one!</a> </md-not-found> </md-autocomplete> </div><div flex class="btn-search-holder"><button class="btn-search" type="button"><i class="fa fa-search"></i> </button></div></div>',controllerAs:"vm",scope:{},bindToController:{searchableList:"="},link:function(){}}}e.$inject=["$timeout","$q","$log"],angular.module("orgChart").directive("treeSearchBox",e)}(),function(){"use strict";function e(e){var t=this;t.isExpandAllMode=e.isExpandAllMode(),t.toggleExpandAllMode=function(){t.isExpandAllMode=e.toggleExpandAllMode()},t.zoomTrigger=function(e){t.zoomTriggerCallBack({status:e})},t.zoomScale=e.getZoomScale()}e.$inject=["toolSetService"],angular.module("orgChart").directive("treeToolSet",function(){return{replace:!1,restrict:"EA",controller:e,controllerAs:"vm",template:'<div layout="column" layout-align="center end"> <div layout="column" layout-align="space-around center" class="toolset-wrapper" flex-offset="5"> <div> <button class="toolset-btn upper-rounded" ng-click="vm.zoomTrigger(\'increment\')"> <md-tooltip md-direction="bottom">Zoom In</md-tooltip> <md-icon><i ng-class="{\'fa fa-plus\':true,\'custom-font-icon\':true}"></i></md-icon></button> </div><div> <button class="toolset-btn lower-rounded" ng-click="vm.zoomTrigger(\'decrement\')"> <md-tooltip md-direction="bottom">Zoom Out</md-tooltip> <md-icon><i ng-class="{\'fa fa-minus\':true,\'custom-font-icon\':true}"></i></md-icon></button> </div><div style="margin-top: 10px"> <button class="toolset-btn" ng-click="vm.toggleExpandAllMode()"> <md-tooltip md-direction="bottom"><span ng-if="!vm.isExpandAllMode">Expand All</span><span ng-if="vm.isExpandAllMode">Collapse All</span></md-tooltip> <md-icon><i ng-class="{\'fa fa-expand\':!vm.isExpandAllMode,\'fa fa-compress\':vm.isExpandAllMode,\'custom-font-icon\':true}"></i> </md-icon></button> </div></div></div>',scope:{},bindToController:{zoomTriggerCallBack:"&"},link:function(e,t,n,o){}}})}(),function(){"use strict";angular.module("orgChart").factory("toolSetService",function(){var e=!1,t=1;return{isExpandAllMode:function(){return e},toggleExpandAllMode:function(){return e=!e},getZoomScale:function(){return console.log("getZoom Scale",t),t},setZoomScale:function(e){t=e,console.log("zoom scale",t)},incrementZoomScale:function(){return t+=.1},decrementZoomScale:function(){return t>-2.5&&(t-=.1),t}}})}(),function(){"use strict";function e(e,n,o){return{restrict:"E",replace:!0,templateNamespace:"svg",controller:t,template:'<foreignObject width="260" height="220" style="overflow: visible"><div style="margin-top: 50px;margin-left:10px" ng-class="{\'active-node\':vm.isActive}" class="{{vm.nodeClass}}" ng-mouseenter="vm.whenMouseEnter()" ng-mouseleave="vm.whenMouseLeave()" ng-click="vm.makeNodeActive()"> <div layout="column" layout-align="center center"> <div ng-class="{\'node-text-main-no-image\':!vm.isImagePresent}" class="md-subhead node-text-main"><trim-word word-options ="vm.wordTrimOptions" word="vm.node.name"></trim-word></div><div> <div class="round-chip-wrapper"><img ng-if="vm.isImagePresent" ng-src="{{vm.node.image_url}}" class="round-chip"> </div></div><div  ng-class="{\'node-text-sub-no-image\':!vm.isImagePresent}" class="md-subhead node-text-sub">{{vm.node.name}}</div><div layout-align="center center" layout-fill layout="row"> <div ng-repeat="action in vm.nodeActions"> <button ng-click="vm.makeCallBack(action.callBack); $event.stopPropagation();" class="action-btn"><span></span>&nbsp;<i class="{{action.icon}}"></i></button> </div></div></div></div></foreignObject>',controllerAs:"vm",scope:{},bindToController:{nodeId:"@",nodeActions:"@"},link:{pre:function(t,r,i,a){function l(){o.$broadcast("app:nodes:clearactive",{data:""})}function c(e){r===e.target||r[0].contains(e.target)||t.$apply(function(){a.isActive=!1})}console.log(i.imagepresent),a.isImagePresent="true"==i.imagepresent,a.id=i.nodeid,a.nodeActions=angular.fromJson(i.nodeactions),console.log(a.nodeActions),a.isPinnedNode=!1,a.node=e.findById(i.nodeid),a.wordTrimOptions={word:"d",from:"0",until:"12",toolTip:"true",toolTipDirection:"top"},a.nodeClass="node-label node-"+a.node.type+" node-"+a.id,a.isExpandedView=!1,a.isActive=!1,a.whenMouseEnter=function(){console.log("mouse Entered")},a.whenMouseLeave=function(){console.log("mouse leaved")},a.togglePinnedMode=function(){a.isPinnedNode=!0,console.log(a.isPinnedNode)},a.makeCallBack=function(e){console.log(e),t.$parent.vm.makeCallBack(e,a.node)},a.makeNodeActive=function(){l(),a.isActive=!0};angular.element(r.children()[0]);n.on("click",c),t.$on("$destroy",function(){n.off("click",c)})}}}}function t(){}e.$inject=["treeViewService","$document","$rootScope"],angular.module("orgChart").directive("treeNode",e)}(),function(){"use strict";function e(e,n,o,r,i,a){return{replace:"false",templateNamespace:"svg",restrict:"E",scope:{},bindToController:{data:"=",abn:"&",del:"&",add:"&",edit:"&",nodeActions:"@",treedata:"=",searchableList:"=",imagepresent:"="},controller:t,controllerAs:"vm",link:{pre:function(t,l,c,d){function s(){g(),u()}function u(){t.$watch(function(){return i.isExpandAllMode()},function(e){e?h():f()})}function h(){m(.5),i.setZoomScale(.5),J(),A()}function f(){m(1),i.setZoomScale(1),J(),S()}function g(){t.$watch(function(){return o.getSearchedNode()},function(e){if(console.log(e),e){B(e);var t=q(e);Q(),r(function(){console.log(t.x,t.y),R(),K(t.id),H(t)},500)}})}function m(e){var t={x:0,y:0,k:e};Y([t.x,t.y],t.k)}function p(e,t){ve=e,d3.select(t).select(".ghost-area").attr("pointer-events","none"),d3.selectAll(".ghost-area").attr("class","ghost-area show"),d3.select(t).attr("class","node active-drag"),_e.selectAll("g.node").sort(function(e,t){return e.id!=ve.id?1:-1}),X.length>1&&(re=Oe.links(X),ie=_e.selectAll("path.link").data(re,function(e){return e.target.id}).remove(),ae=_e.selectAll("g.node").data(X,function(e){return e.id}).filter(function(e,t){return e.id!=ve.id}).remove()),le=Oe.links(Oe.nodes(ve.parent)),_e.selectAll("path.link").filter(function(e,t){return e.target.id==ve.id}).remove(),me=null}function v(e,t){var n,o,r,a=xe;ne&&(clearTimeout(ne),oe=d3.transform(_e.attr("transform")),"left"==t||"right"==t?(n="left"==t?oe.translate[0]+a:oe.translate[0]-a,o=oe.translate[1]):"up"!=t&&"down"!=t||(n=oe.translate[0],o="up"==t?oe.translate[1]+a:oe.translate[1]-a),oe.scale[0],oe.scale[1],r=i.getZoomScale(),_e.transition().attr("transform","translate("+n+","+o+")scale("+r+")"),d3.select(e).select("g.node").attr("transform","translate("+n+","+o+")"),Ce.scale(r),Ce.translate([n,o]),ne=setTimeout(function(){v(e,a,t)},50))}function x(){var e=[];if(null!==ve&&null!==pe){var t=d.imagepresent?5:50;e=[{source:{x:pe.x0+12+ge.width/2,y:pe.y0+50+ge.height+10},target:{x:ve.x0+12+ge.width/2,y:ve.y0+t}}]}var n=_e.selectAll(".temp-link").data(e);n.enter().append("path").attr("class","temp-link").attr("d",d3.svg.diagonal()).attr("pointer-events","none"),n.attr("d",d3.svg.diagonal()),n.exit().remove()}function y(){pe=null,d3.selectAll(".ghost-area").attr("class","ghost-area"),d3.select(ee).attr("class","node"),d3.select(ee).select(".ghost-area").attr("pointer-events",""),x(),null!==ve&&(T(fe),H(ve),ve=null)}function w(e){e.children&&(e.children.forEach(w),E(e))}function b(e){var t=e.children?e.children:e._children;e._children&&(e.children=e._children,e._children=null),t&&t.forEach(b)}function k(e){var t=e.children?e.children:e._children;e.children&&(e._children=e.children,e.children=null),t&&t.forEach(k)}function A(){b(fe),T(fe)}function S(){k(fe),T(fe)}function T(e){var r=d3.event&&d3.event.altKey?5e3:500,i=Oe.nodes(fe).reverse();i.forEach(function(e){e.weight?e.y=12*e.weight+300*e.depth:e.y=300*e.depth});var a=_e.selectAll("g.node").data(i,function(e){return e.id||(e.id=++Se)}),l=a.enter().append("svg:g").call(he).attr("class","node").attr("id",function(e){return"node-"+e.id}).attr("transform",function(t){return"translate("+e.x0+","+e.y0+")"}).on("click",function(e){d3.event.defaultPrevented||(E(e),T(e))});l.append("rect").attr("class","ghost-area").attr("width",ge.width).attr("height",ge.height+250).attr("opacity",.2).style("fill","transparent").attr("pointer-events","mouseover").on("mouseover",function(e){Ne(e)}).on("mouseout",function(e){Me(e)}),l.append("tree-node").attr("node",function(e){return o.pushNode(e),""}).on("click",P).attr("nodeId",function(e){return e.id}).attr("imagePresent",function(e){return d.imagepresent}).attr("isPinnedNode","false").attr("nodeActions",c.nodeactions).each(function(){n(this)(t)}),a.transition().duration(r).attr("transform",function(e){return"translate("+e.x+","+e.y+")"});var s=a.exit().transition().duration(r).attr("transform",function(t){return"translate("+e.x+","+e.y+")"}).remove();s.select("circle").attr("r",1e-6),s.select("text").style("fill-opacity",1e-6);var u=_e.selectAll("path.link").data(Oe.links(i),function(e){return e.target.id});u.enter().insert("svg:path","g").attr("class","link").attr("d",function(t){var n={x:e.x0,y:e.y0};return ze({source:n,target:n})}).transition().duration(r).attr("d",N),u.transition().duration(r).attr("d",N).style("stroke",function(e){if("highlight-link"===e.target.class)return this.parentNode.appendChild(this),"#ff4136"}),u.exit().transition().duration(0).attr("d",function(t){var n={x:e.x,y:e.y};return ze({source:n,target:n})}).remove(),i.forEach(function(e){e.x0=e.x,e.y0=e.y}),angular.copy(i,ye),o.setNodes(ye)}function E(e){e.children?(e._children=e.children,e.children=null):(e.children=e._children,e._children=null)}function C(e){return e.source.children.length>1&&e.source.children[0]==e.target?"onleft":e.source.children.length>1&&e.source.children[e.source.children.length-1]==e.target?"onright":"straight"}function N(e){var t=C(e),n="",o=d.imagepresent?5:50;switch(t){case"straight":n+="M"+(e.source.x+ge.width/2+12)+","+(e.source.y+ge.height+57)+"V"+(e.source.y+ge.height+ge.height/2+35)+"H"+(e.target.x+12+ge.width/2)+"V"+(e.target.y+o)+"M"+e.target.x+"12,"+(e.target.y+o);break;case"onleft":n+="M"+(e.source.x+ge.width/2+12)+","+(e.source.y+ge.height+57)+"V"+(e.source.y+ge.height+ge.height/2+35)+"H"+(e.target.x+12+ge.width/2+8)+" Q "+(e.target.x+12+ge.width/2-8+8)+","+(e.source.y+ge.height+ge.height/2+35)+" "+(e.target.x+12+ge.width/2-8+8)+","+(e.source.y+ge.height+ge.height/2+8+35)+"V"+(e.target.y+o)+"M"+e.target.x+"12,"+(e.target.y+o);break;case"onright":n+="M"+(e.source.x+12+ge.width/2)+","+(e.source.y+ge.height+57)+"V"+(e.source.y+ge.height+ge.height/2+35)+"H"+(e.target.x+12+ge.width/2-8)+" Q "+(e.target.x+12+ge.width/2)+","+(e.source.y+ge.height+ge.height/2+35)+" "+(e.target.x+12+ge.width/2)+","+(e.source.y+ge.height+ge.height/2+8+35)+"V"+(e.target.y+o)+"M"+e.target.x+"12,"+(e.target.y+o)}return n}function M(e,t){Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,9),I(e.id,t)}function _(e){var t=e.parent.children.indexOf(e);t>-1&&e.parent.children.splice(t,1),O(fe.children,e),T(e.parent),Z()}function O(e,t){angular.forEach(e,function(n,o){if(t.id==n.id){var r=e.indexOf(n);r>-1&&e.splice(r,1)}else angular.isDefined(n.children)&&null!==n.children&&O(n.children,t)})}function z(e,t){angular.forEach(e,function(n,o){if(t.id==n.id){var r=e.indexOf(n);r>-1&&(e[r].name=t.name)}else angular.isDefined(n.children)&&null!==n.children&&O(n.children,t)})}function I(e,t){var n=d3.select("#node-"+e).datum();void 0===n.children&&void 0===n._children?n.children=[t]:null!=n._children?(n._children.push(t),E(n)):null!=n.children?n.children.push(t):null==n._children&&(n._children=[],n._children.push(t),E(n)),T(n)}function Z(){d3.event.stopPropagation()}function P(e){d3.event.defaultPrevented||(console.log(e),D(this)||H(e))}function B(e){var t=L(d.treedata,e.name,[]);angular.isDefined(t)?(j($e),V(t)):console.log("Searched node "+e.name+" not found"),$e=t}function V(e){angular.forEach(e,function(e,t){e.class="highlight-link",e._children&&(e.children=e._children,e._children=null),T(e)})}function j(e){angular.forEach(e,function(e,t){e.class="",e._children&&(e.children=e._children,e._children=null),T(e)})}function L(e,t,n){if(e.name===t)return n.push(e),n;if(!e.children&&!e._children)return!1;for(var o=e.children?e.children:e._children,r=0;r<o.length;r++){n.push(e);var i=L(o[r],t,n);if(i)return i;n.pop()}}function D(e){var t=!1;return Ie.node()===e&&(t=Q()),!!t||(Ie.classed("active",!1),Ie=d3.select(e).classed("active",!0),!1)}function H(e){var t=i.getZoomScale(),n=[-t*e.x,-t*e.y];console.log("node",e),console.log("node translate ",n),_e.transition().duration(1250).call(Ce.translate(n).scale(t).event)}function Q(){return console.log("Resetting Active nodes"),Ie.classed("active",!1),Ie=d3.select(null),!0}function q(t){return e("filter")(ye,{id:t.id},!0)[0]}function W(t){return e("filter")(ye,{id:t},!0)[0]}function J(){F(0,0)}function F(e,t){_e.transition().duration(1e3).delay(100).attr("transform",function(n){return"translate("+e+","+t+")scale("+i.getZoomScale()+")"})}function K(e){var t=d3.selectAll(".node-"+e.toString());angular.element(t[0]).addClass("active-node")}function R(){var e=d3.selectAll(".node-label");angular.forEach(e,function(e,t){angular.element(e).removeClass("active-node")})}function Y(e,t){return d3.transition().duration(250).tween("wheel.zoom",function(){var n=d3.interpolate(Ce.translate(),e),o=d3.interpolate(Ce.scale(),t);return function(e){Ce.scale(o(e)).translate(n(e)),U()}})}function G(e){var t=1,n=1,o=[be/2,Ae/2],r=Ce.scaleExtent(),i=Ce.translate(),a=[],l=[],c={x:i[0],y:i[1],k:Ce.scale()};if(t="increment"===e?1:-1,(n=Ce.scale()*(1+.2*t))<r[0]||n>r[1])return!1;a=[(o[0]-c.x)/c.k,(o[1]-c.y)/c.k],c.k=n,l=[a[0]*c.k+c.x,a[1]*c.k+c.y],c.x+=o[0]-l[0],c.y+=o[1]-l[1],Y(Ce.translate(),c.k)}function U(){console.log(Ce.scale()),i.setZoomScale(Ce.scale()),_e.attr("transform","translate("+Ce.translate()+")scale("+i.getZoomScale()+")"),_e.selectAll("g.parent").attr("transform",function(e){return"translate("+e.x+","+e.y+")scale("+i.getZoomScale()+")"})}var X,ee,te,ne,oe,re,ie,ae,le,ce,de,se,ue,he,fe,ge={width:240,height:146,horizontalSeperation:16,verticalSeperation:128},me=!1,pe=null,ve=null,xe=200,ye=[],we=[20,20,20,20],be=a.innerWidth-20-we[1]-we[3],ke=a.innerHeight,Ae=600-we[0]-we[2],Se=0,Te=(d3.scale.linear().domain([0,be]).range([0,be]),d3.scale.linear().domain([0,Ae]).range([0,Ae]),"0 0 "+be+" "+ke),Ee=d3.select(l[0]),$e=[],Ce=d3.behavior.zoom().translate([0,0]).scale(i.getZoomScale()).scaleExtent([.3,8]).on("zoom",U);d.wordTrimOptions={word:"d",from:"0",until:"12",toolTip:"true",toolTipDirection:"top"},l.append(n("<div class='component-container'><div layout=\"row\" layout-align=\"space-around center\"><div flex><tree-search-box searchable-list='vm.searchableList'></tree-search-box></div><div flex><tree-tool-set zoom-trigger-call-back='vm.zoomTrigger(status)'></tree-tool-set></div></div></div>")(t)),d.zoomTrigger=function(e){console.log(e),G(e)},ce=t.$on("app:nodes:clearactive",function(e,t){R()}),de=t.$on("app:nodes:delete",function(e,t){console.log(t),_(W(t.nodeID))}),se=t.$on("app:nodes:add::after",function(e,t){M(W(t.parentNode.id),t.lastAddedNode)}),ue=t.$on("app:nodes:update::after",function(e,t){z(fe.children,t.lastEditedNode),T(t.lastEditedNode),Z()}),he=d3.behavior.drag().on("dragstart",function(e){e!=fe&&(me=!0,X=Oe.nodes(e),d3.event.sourceEvent.stopPropagation())}).on("drag",function(e){if(e!=fe){if(me&&p(e,ee=this),(te=d3.mouse($("svg").get(0)))[0]<20)ne=!0,v(this,"left");else if(te[0]>$("svg").width()-20)ne=!0,v(this,"right");else if(te[1]<20)ne=!0,v(this,"up");else if(te[1]>$("svg").height()-20)ne=!0,v(this,"down");else try{clearTimeout(ne)}catch(e){console.error(e)}e.x0+=d3.event.dx,e.y0+=d3.event.dy,d3.select(this).attr("transform","translate("+e.x0+","+e.y0+")"),x()}}).on("dragend",function(e){if(e!=fe)if(ee=this,pe){var t=ve.parent.children.indexOf(ve);t>-1&&ve.parent.children.splice(t,1),void 0!==pe.children||void 0!==pe._children?void 0!==pe.children?pe.children.push(ve):pe._children.push(ve):(pe.children=[],pe.children.push(ve)),y()}else y()});var Ne=function(e){pe=e,x()},Me=function(e){pe=null,x()};s();var _e=Ee.append("div").attr("layout","row").attr("layout-align","space-around center").append("div").attr("flex","").attr("id","svg-box-container").call(function(){}).append("svg").attr("id","svgBox").attr("viewBox",Te).attr("style","cursor:move;").attr("width","100%").attr("height",ke).call(Ce).append("svg:g").attr("transform","translate("+(a.innerWidth/2-120)+","+Ae/4+")").attr("style","cursor:pointer;").on("click",Z,!1).call(d3.behavior.drag().on("dragstart",function(){}).on("drag",function(){})).append("g").attr("width",160).attr("height",120).attr("class","tree-holder");d3.selection.prototype.moveToFront=function(){return this.each(function(){this.parentNode.appendChild(this)})};var Oe=d3.layout.tree().nodeSize([ge.width+ge.horizontalSeperation,ge.height+ge.verticalSeperation]).separation(function(e,t){return e.parent==t.parent?1.25:1.5}),ze=d3.svg.diagonal().source(function(e){return{x:e.source.x+ge.width/2,y:e.source.y+(ge.height+10)}}).target(function(e){return{x:e.target.x+ge.width/2,y:e.target.y-("true"==c.imagepresent?45:0)}}).projection(function(e){return[e.x+0,e.y+0]});(fe=d.treedata).x0=Ae/2,fe.y0=0,console.log(fe),fe.children.forEach(w),T(fe);var Ie=d3.select(null);t.$on("$destroy",function(){ce(),de(),se(),ue()})}}}}function t(e){var t=this;t.makeCallBack=function(t,n){e.vm[t]({node:n})},console.log(t.searchableList)}e.$inject=["$filter","$compile","treeViewService","$timeout","toolSetService","$window"],t.$inject=["$scope"],angular.module("orgChart").directive("treeView",e)}(),function(){"use strict";function e(e){var t=null,n=[];return{setSearchedNode:function(e){t=e},getSearchedNode:function(){return t},setNodes:function(e){n=e},pushNode:function(e){n.push(e)},getNodes:function(){return n},findById:function(t){return e("filter")(n,{id:t},!0)[0]}}}e.$inject=["$filter"],angular.module("orgChart").factory("treeViewService",e)}(),function(){"use strict";function e(){}angular.module("orgChart").directive("trimWord",function(){return{restrict:"E",template:'<span ng-bind="vm.parsedText"><md-tooltip ng-if="vm.isToolTipNeed()" md-direction="vm.wordOptions.toolTipDirection">{{::vm.word}}</md-tooltip></span>',scope:{},controller:e,controllerAs:"vm",link:function(e,t,n,o){function r(){e.$watch(angular.bind(o,function(){return o.word}),function(e){console.log("word change to "+e),a()})}function i(){var e=parseInt(o.wordOptions.from),t=parseInt(o.wordOptions.until);return o.word.substring(e,t)}function a(){o.parsedText=i(),o.word.length>parseInt(o.wordOptions.until)?o.parsedText=o.parsedText.concat(" ..."):o.parsedText}o.isToolTipNeed=function(){return"true"==o.wordOptions.toolTip},r(),a()},bindToController:{wordOptions:"=",word:"="}}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
