!function(){"use strict";angular.module("orgChart",[])}(),function(){"use strict";angular.module("orgChart").directive("cascadeTreeSearchBox",function(e,n,t){return{replace:!1,restrict:"EA",controller:function(o){function a(e){var n=angular.lowercase(e);return function(e){return 0===e.displayLowerCase.indexOf(n)}}var i=this;i.simulateQuery=!1,i.isDisabled=!1,i.noCache=!0,i.states=[{value:{name:"PublisherNameLongName",id:"id1",type:"type0",addable:!1,editable:!1,removable:!1,enableble:!1},display:"PublisherNameLongName",displayLowerCase:"PublisherNameLongName".toLowerCase()},{value:{name:"Landing A",id:"id2",type:"type1",addable:!0,editable:!0,removable:!0,enablable:!0,enable:!1},display:"Landing A",displayLowerCase:"Landing A".toLowerCase()},{value:{name:"Account 1",id:"id3",type:"type2"},display:"Account 1",displayLowerCase:"Account 1".toLowerCase()},{value:{name:"Landing B",id:"id8",type:"type1"},display:"Landing B",displayLowerCase:"Landing B".toLowerCase()}],i.querySearch=function(t){var o,l=t?i.states.filter(a(t)):i.states;return i.simulateQuery?(o=n.defer(),e(function(){o.resolve(l)},1e3*Math.random(),!1),o.promise):l},i.selectedItemChange=function(e){e&&(t.info("Item changed to "+JSON.stringify(e)),o.setSearchedNode(e.value))},i.searchTextChange=function(e){t.info("Text changed to "+e)},i.newState=function(e){alert("Sorry! You'll need to create a Constitution for "+e+" first!")}},template:'<div layout-align="start center" layout="row" layout-fill> <div flex-offset="5"> <md-autocomplete style="margin-top: 20px" ng-disabled="vm.isDisabled" md-no-cache="vm.noCache" md-selected-item="vm.selectedItem" md-search-text-change="vm.searchTextChange(vm.searchText)" md-search-text="vm.searchText" md-selected-item-change="vm.selectedItemChange(item)" md-items="item in vm.querySearch(vm.searchText)" md-item-text="item.display" md-min-length="0" placeholder="Search People"> <md-item-template> <span md-highlight-text="ctrl.searchText" md-highlight-flags="^i">{{item.display}}</span> </md-item-template> <md-not-found> No states matching "{{ctrl.searchText}}" were found. <a ng-click="ctrl.newState(ctrl.searchText)">Create a new one!</a> </md-not-found> </md-autocomplete> </div></div>',controllerAs:"vm",scope:{},bindToController:{},link:function(){}}})}(),function(){"use strict";function e(e){var n=this;n.isExpandAllMode=e.isExpandAllMode(),n.toggleExpandAllMode=function(){n.isExpandAllMode=e.toggleExpandAllMode()},n.incrementZoomScale=function(){n.zoomScale=e.incrementZoomScale()},n.decrementZoomScale=function(){n.zoomScale=e.decrementZoomScale()},n.zoomScale=e.getZoomScale()}angular.module("orgChart").directive("cascadeToolSet",function(){return{replace:!1,restrict:"EA",controller:e,controllerAs:"vm",template:'<div layout="column" layout-align="center end"> <div layout="row" layout-align="space-around center" style="margin-top: 20px" flex-offset="5"> <div> <md-button class="md-icon-button" ng-click="vm.incrementZoomScale()"> <md-tooltip md-direction="bottom">Zoom In</md-tooltip> <md-icon md-font-icon="zmdi zmdi-plus"></md-icon></md-button> </div><div> <md-button class="md-icon-button" ng-click="vm.decrementZoomScale()" ng-disabled="vm.zoomScale<=1"> <md-tooltip md-direction="bottom">Zoom Out</md-tooltip> <md-icon md-font-icon="zmdi zmdi-minus"></md-icon></md-button> </div><div> <md-button class="md-icon-button" ng-hide="vm.isExpandAllMode" ng-click="vm.toggleExpandAllMode()"> <md-tooltip md-direction="bottom">Expand All</md-tooltip> <md-icon md-font-icon="zmdi zmdi-triangle-down"></md-icon></md-button> </div><div> <md-button class="md-icon-button" ng-show="vm.isExpandAllMode" ng-click="vm.toggleExpandAllMode()"> <md-tooltip md-direction="bottom">Collapse All</md-tooltip> <md-icon md-font-icon="zmdi zmdi-triangle-up"></md-icon></md-button> </div></div></div>',scope:{},bindToController:{},link:function(e,n,t,o){}}})}(),function(){"use strict";angular.module("orgChart").factory("toolSetService",function(){var e=!1,n=1;return{isExpandAllMode:function(){return e},toggleExpandAllMode:function(){return e=!e},getZoomScale:function(){return n},setZoomScale:function(e){n=e,console.log("zoom scale",n)},incrementZoomScale:function(){return n+=.1},decrementZoomScale:function(){return n>1&&(n-=.1),n}}})}(),function(){"use strict";function e(e){}angular.module("orgChart").directive("cascadeTreeNode",function(n,t,o,a){return{restrict:"E",replace:!1,controller:e,template:'<div ng-class="{\'active-node\':vm.isActive}" class="{{vm.nodeClass}}" ng-mouseenter="vm.whenMouseEnter()" ng-mouseleave="vm.whenMouseLeave()" ng-click="vm.makeNodeActive()"> <div layout="column" layout-align="center center"> <div class="md-subhead">Some Text</div><div> <div class=""><img ng-src="assets/images/avatars/flasher.thumb.jpg" class="round-chip"></div></div><div class="md-subhead">{{vm.node.name}}</div><div layout-align="center center" layout-fill class="action-area" layout="row" ng-show="vm.isExpandedView"> <div ng-repeat="action in vm.nodeActions"><button ng-click="vm.makeCallBack(action.callBack)"><span ng-bind="action.name"></span>&nbsp;<i class="{{action.icon}}"></i></button></div></div></div></div>',controllerAs:"vm",scope:{},bindToController:{nodeId:"@",nodeActions:"@"},link:function(e,t,i,l){function c(){a.$broadcast("app:nodes:clearactive",{data:""})}function r(n){t===n.target||t[0].contains(n.target)||e.$apply(function(){l.isActive=!1})}l.id=i.nodeid,l.nodeActions=angular.fromJson(i.nodeactions),console.log(l.nodeActions),l.isPinnedNode=!1,l.node=n.findById(i.nodeid),l.nodeClass="node-label node-"+l.node.type+" node-"+l.id,l.isExpandedView=!1,l.isActive=!1,l.whenMouseEnter=function(){console.log("mouse Entered"),l.isExpandedView=!0},l.whenMouseLeave=function(){console.log("mouse leaved"),l.isExpandedView=!1},l.togglePinnedMode=function(){l.isPinnedNode=!0,console.log(l.isPinnedNode)},l.makeCallBack=function(n){console.log(n),e.$parent.vm.makeCallBack(n)},l.makeNodeActive=function(){c(),l.isActive=!0},angular.element(t.children()[0]),o.on("click",r),e.$on("$destroy",function(){o.off("click",r)})}}})}(),function(){"use strict";function e(e,n,t){this.makeCallBack=function(e){console.log("called treeview call back abn"),n.vm[e]()}}angular.module("orgChart").directive("cascadeTreeView",function(n,t,o,a,i,l){return{replace:"false",restrict:"E",scope:{},bindToController:{data:"=",abn:"&",nodeActions:"@"},controller:e,controllerAs:"vm",link:function(e,c,r,d){function s(){m(),f(),u()}function u(){e.$watch(function(){return i.isExpandAllMode()},function(e){e?h():y()})}function m(){e.$watch(function(){return o.getSearchedNode()},function(e){if(console.log(e),e){w(e);var n=z(e);_(),a(function(){console.log(n.x,n.y),T(),M(n.id),N(n)},500)}})}function f(){e.$watch(function(){return i.getZoomScale()},function(e){console.log(e),q.transition().duration(750).call(R.translate([150,100]).scale(e).scaleExtent([1,8]).event)})}function v(e){e.children&&(e.children.forEach(v),x(e))}function p(e){var n=e.children?e.children:e._children;e._children&&(e.children=e._children,e._children=null),n&&n.forEach(p)}function g(e){var n=e.children?e.children:e._children;e.children&&(e._children=e.children,e.children=null),n&&n.forEach(g)}function h(){p(Z),b(Z)}function y(){g(Z),b(Z)}function b(n){var a=d3.event&&d3.event.altKey?5e3:500,i=J.nodes(Z).reverse();i.forEach(function(e){e.y=200*e.depth});var l=q.selectAll("g.node").data(i,function(e){return e.id||(e.id=++O)}),c=l.enter().append("svg:g").attr("class","node").attr("id",function(e){return"node-"+e.id}).attr("transform",function(e){return"translate("+n.x0+","+n.y0+")"}).on("click",function(e){d3.event.defaultPrevented||(x(e),b(e),e.info&&playvid(e.info))});c.append("svg:circle").attr("r",1e-6).style("fill",function(e){return e._children?"lightsteelblue":"#fff"}),c.append("svg:foreignObject").attr("y",-30).attr("x",-5).attr("text-anchor",function(e){return e.children||e._children?"end":"start"}).style("fill-opacity",1e-6).attr("width",160).attr("height",120).append("xhtml:div").classed("disabled",function(e){return void 0!==e.enable&&!e.enable}).on("click",k).append("cascade-tree-node").attr("nodeId",function(e){return e.id}).attr("isPinnedNode","false").attr("nodeActions",r.nodeactions).each(function(){t(this)(e)});var d=l.transition().duration(a).attr("transform",function(e){return"translate("+e.x+","+e.y+")"});d.select("circle").attr("r",4.5).style("fill",function(e){return"highlight-link"===e.class?"#ff4136":e._children?"lightsteelblue":"#fff"}),d.select("text").style("fill-opacity",1);var s=l.exit().transition().duration(a).attr("transform",function(e){return"translate("+n.x+","+n.y+")"}).remove();s.select("circle").attr("r",1e-6),s.select("text").style("fill-opacity",1e-6);var u=q.selectAll("path.link").data(J.links(i),function(e){return e.target.id});u.enter().insert("svg:path","g").attr("class","link").attr("d",function(e){var t={x:n.x0,y:n.y0};return Q({source:t,target:t})}).transition().duration(a).attr("d",Q),u.transition().duration(a).attr("d",Q).style("stroke",function(e){if("highlight-link"===e.target.class)return"#ff4136"}),u.exit().transition().duration(a).attr("d",function(e){var t={x:n.x,y:n.y};return Q({source:t,target:t})}).remove(),i.forEach(function(e){e.x0=e.x,e.y0=e.y}),angular.copy(i,B),o.setNodes(B)}function x(e){e.children?(e._children=e.children,e.children=null):(e.children=e._children,e._children=null)}function A(){d3.event.stopPropagation()}function k(e){d3.event.defaultPrevented||(console.log(e),L(this)||N(e))}function w(e){var n=E(P,e.name,[]);angular.isDefined(n)?(C(D),S(n)):console.log("Searched node "+e.name+" not found"),D=n}function S(e){angular.forEach(e,function(e,n){e.class="highlight-link",e._children&&(e.children=e._children,e._children=null),b(e)})}function C(e){angular.forEach(e,function(e,n){e.class="",e._children&&(e.children=e._children,e._children=null),b(e)})}function E(e,n,t){if(e.name===n)return t.push(e),t;if(!e.children&&!e._children)return!1;for(var o=e.children?e.children:e._children,a=0;a<o.length;a++){t.push(e);var i=E(o[a],n,t);if(i)return i;t.pop()}}function L(e){var n=!1;return K.node()===e&&(n=_()),!!n||(K.classed("active",!1),K=d3.select(e).classed("active",!0),!1)}function N(e){var n=[e.x/2-1*e.x,e.y/2-1*e.y];q.transition().duration(1250).call(R.translate(n).scale(1).event)}function _(){return console.log("reset called"),K.classed("active",!1),K=d3.select(null),q.transition().duration(750).call(R.translate([150,100]).scale(1).event),!0}function z(e){return n("filter")(B,{id:e.id},!0)[0]}function M(e){var n=d3.selectAll(".node-"+e.toString());angular.element(n[0]).addClass("active-node")}function T(){var e=d3.selectAll(".node-label");angular.forEach(e,function(e,n){angular.element(e).removeClass("active-node")})}var Z,P={name:"RootNode",id:"id1",type:"type0",addable:!1,editable:!1,removable:!1,enableble:!1,root:!0,children:[{name:"Landing A",id:"id2",type:"type1",addable:!0,editable:!0,removable:!0,enablable:!0,enable:!1,children:[{name:"Account 1",id:"id3",type:"type2",children:[{name:"tracking link 1",id:"id4",type:"type3",enablable:!0,enable:!0},{name:"tracking link 2",id:"id5",type:"type3",enablable:!0,enable:!0},{name:"tracking link 3",id:"id6",type:"type3",enablable:!0,enable:!1}]},{name:"Account 2",id:"id7",type:"type2"},{name:"Account 3",id:"id9",type:"type2"}]},{name:"Landing B",id:"id8",type:"type1",children:[{name:"Account 4",id:"id10",type:"type2"},{name:"Account 5",id:"id11",type:"type2"},{name:"Account 6",id:"id12",type:"type2"}]},{name:"Landing C",id:"id13",type:"type1",children:[{name:"Subtopic 7",id:"id14",type:"type3"},{name:"Subtopic 8",id:"id15",type:"type3"},{name:"Subtopic 9",id:"id16",type:"type3"}]}]},B=[],$=[20,20,20,20],I=l.innerWidth-20-$[1]-$[3],V=600-$[0]-$[2],O=0,j=(d3.scale.linear().domain([0,I]).range([0,I]),d3.scale.linear().domain([0,V]).range([0,V]),d3.select(c[0])),D=[];c.append(t('<div layout="row" layout-align="space-around center"><div flex><cascade-tree-search-box></cascade-tree-search-box></div><div flex><cascade-tool-set></cascade-tool-set></div></div>')(e)),s();var q=j.append("div").attr("layout","row").attr("layout-align","space-around center").call(function(){t(this[0])(e)}).append("div").attr("flex","").call(function(){t(this[0])(e)}).append("svg:svg").attr("viewBox","0 0 600 600").attr("width",I+$[1]+$[3]).attr("height",V+$[0]+$[2]).append("svg:g").attr("transform","translate("+$[3]+","+$[0]+")").call(d3.behavior.zoom().on("zoom",function(){i.setZoomScale(d3.event.scale),e.$apply(),console.log(d3.event.scale),q.attr("transform","translate("+d3.event.translate+")")})).on("click",A,!1).call(d3.behavior.drag().on("dragstart",function(){d3.event.sourceEvent.stopPropagation()}).on("drag",function(){console.log("dragged"),d3.event.sourceEvent.stopPropagation()})).append("g").attr("width",160).attr("height",120).attr("class","tree-holder"),J=d3.layout.tree().size([V,I]).nodeSize([110,60]).separation(function(e,n){return e.parent,n.parent,2}),Q=d3.svg.diagonal().projection(function(e){return[e.x+80,e.y+80]});(Z=P).x0=V/2,Z.y0=0,console.log(Z),Z.children.forEach(v),b(Z);var K=d3.select(null),R=d3.behavior.zoom().translate([0,0]).scale(1).scaleExtent([1,8]).on("zoom",function(){q.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")});e.$on("app:nodes:clearactive",function(e,n){T()}),e.$on("$destroy",function(){})}}})}(),function(){"use strict";angular.module("orgChart").factory("treeViewService",function(e){var n=null,t=[];return{setSearchedNode:function(e){n=e},getSearchedNode:function(){return n},setNodes:function(e){t=e},getNodes:function(){return t},findById:function(n){return e("filter")(t,{id:n},!0)[0]}}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
