!function(){"use strict";angular.module("orgChart",[])}(),function(){"use strict";function e(e,t,n){function o(o,r){function i(e){var t=angular.lowercase(e);return function(e){return 0===e.name.toLowerCase().indexOf(t)}}var a=this;a.simulateQuery=!1,a.isDisabled=!1,a.noCache=!0,a.querySearch=function(n){console.log(a.searchableList);var o,r=n?a.searchableList.filter(i(n)):a.searchableList;return a.simulateQuery?(o=t.defer(),e(function(){o.resolve(r)},1e3*Math.random(),!1),o.promise):r},a.selectedItemChange=function(e){e&&(n.info("Item changed to "+JSON.stringify(e)),o.setSearchedNode(e))},a.searchTextChange=function(e){n.info("Text changed to "+e)},a.newState=function(e){alert("Sorry! You'll need to create a Constitution for "+e+" first!")};var l=r.$on("app:nodes:changed",function(e,t){});r.$on("$destroy",function(){l()})}return o.$inject=["treeViewService","$scope"],{replace:!1,restrict:"EA",controller:o,template:'<div layout-align="start center" layout="row" layout-fill> <div flex-offset="5" class="search-box-holder"> <md-autocomplete ng-disabled="vm.isDisabled" md-no-cache="vm.noCache" md-selected-item="vm.selectedItem" md-search-text-change="vm.searchTextChange(vm.searchText)" md-search-text="vm.searchText" md-selected-item-change="vm.selectedItemChange(item)" md-items="item in vm.querySearch(vm.searchText)" md-item-text="item.name" md-min-length="0" placeholder="Search People" class="auto-complete-custom"> <md-item-template> <span md-highlight-text="ctrl.searchText" md-highlight-flags="^i">{{item.name}}</span> </md-item-template> <md-not-found> No states matching "{{ctrl.searchText}}" were found. <a ng-click="ctrl.newState(ctrl.searchText)">Create a new one!</a> </md-not-found> </md-autocomplete> </div><div flex class="btn-search-holder"><button class="btn-search" type="button"><i class="fa fa-search"></i> </button></div></div>',controllerAs:"vm",scope:{},bindToController:{searchableList:"="},link:function(e,t,n){}}}e.$inject=["$timeout","$q","$log"],angular.module("orgChart").directive("treeSearchBox",e)}(),function(){"use strict";function e(e){var t=this;t.isExpandAllMode=e.isExpandAllMode(),t.toggleExpandAllMode=function(){t.isExpandAllMode=e.toggleExpandAllMode()},t.zoomTrigger=function(e){t.zoomTriggerCallBack({status:e})},t.zoomScale=e.getZoomScale()}e.$inject=["toolSetService"],angular.module("orgChart").directive("treeToolSet",function(){return{replace:!1,restrict:"EA",controller:e,controllerAs:"vm",template:'<div layout="column" layout-align="center end"> <div layout="column" layout-align="space-around center" class="toolset-wrapper" flex-offset="5"> <div> <button class="toolset-btn upper-rounded" ng-click="vm.zoomTrigger(\'increment\')"> <md-tooltip md-direction="bottom">Zoom In</md-tooltip> <md-icon><i ng-class="{\'fa fa-plus\':true,\'custom-font-icon\':true}"></i></md-icon></button> </div><div> <button class="toolset-btn lower-rounded" ng-click="vm.zoomTrigger(\'decrement\')"> <md-tooltip md-direction="bottom">Zoom Out</md-tooltip> <md-icon><i ng-class="{\'fa fa-minus\':true,\'custom-font-icon\':true}"></i></md-icon></button> </div><div style="margin-top: 10px"> <button class="toolset-btn" ng-click="vm.toggleExpandAllMode()"> <md-tooltip md-direction="bottom"><span ng-if="!vm.isExpandAllMode">Expand All</span><span ng-if="vm.isExpandAllMode">Collapse All</span></md-tooltip> <md-icon><i ng-class="{\'fa fa-expand\':!vm.isExpandAllMode,\'fa fa-compress\':vm.isExpandAllMode,\'custom-font-icon\':true}"></i> </md-icon></button> </div></div></div>',scope:{},bindToController:{zoomTriggerCallBack:"&"},link:function(e,t,n,o){}}})}(),function(){"use strict";angular.module("orgChart").factory("toolSetService",function(){var e=!1,t=1;return{isExpandAllMode:function(){return e},toggleExpandAllMode:function(){return e=!e},getZoomScale:function(){return console.log("getZoom Scale",t),t},setZoomScale:function(e){t=e,console.log("zoom scale",t)},incrementZoomScale:function(){return t+=.1},decrementZoomScale:function(){return t>-2.5&&(t-=.1),t}}})}(),function(){"use strict";function e(e,n,o){return{restrict:"E",replace:!0,templateNamespace:"svg",controller:t,template:'<foreignObject width="260" height="220" style="overflow: visible"><div style="margin-top: 50px;margin-left:10px" class="{{vm.nodeClass}}" ng-mouseenter="vm.whenMouseEnter()" ng-mouseleave="vm.whenMouseLeave()" ng-click="vm.makeNodeActive()"> <div layout="column" layout-align="center center"> <div ng-class="{\'node-text-main-no-image\':!vm.isImagePresent}" class="md-subhead node-text-main"><trim-word word-options ="vm.wordTrimOptions" word="vm.getDisplayName(0)"></trim-word></div><div> <div class="round-chip-wrapper"><img ng-if="vm.isImagePresent" ng-src="{{vm.node.image_url}}" class="round-chip" id="img-chip"> </div></div><div  ng-class="{\'node-text-sub-no-image\':!vm.isImagePresent}" class="md-subhead node-text-sub">{{vm.getDisplayName(1)}}</div><div  ng-class="{\'node-text-sub-no-image\':!vm.isImagePresent}" ng-if="!vm.isActionBarPresent" class="md-subhead node-text-sub">Sample Text</div><div layout-align="center center" layout-fill layout="row" ng-if="vm.isActionBarPresent"> <div ng-repeat="action in vm.nodeActions"> <button ng-click="vm.makeCallBack(action.callBack); $event.stopPropagation();" class="action-btn"><span></span>&nbsp;<i class="{{action.icon}}"></i></button> </div></div></div></div></foreignObject>',controllerAs:"vm",scope:{},bindToController:{nodeId:"@",nodeActions:"@"},link:{pre:function(t,r,i,a){function l(){o.$broadcast("app:nodes:clearactive",{data:""})}function c(e){r===e.target||r[0].contains(e.target)||t.$apply(function(){a.isActive=!1})}console.log(i.imagepresent),a.isImagePresent="true"==i.imagepresent,a.isActionBarPresent="true"==i.actionbarpresent,a.nodeDisplayProps=i.nodedisplayprops.split(","),a.id=i.nodeid,a.nodeActions=angular.fromJson(i.nodeactions),console.log(a.nodeActions),a.isPinnedNode=!1,a.node=e.findById(i.nodeid),a.wordTrimOptions={word:"d",from:"0",until:"12",toolTip:"true",toolTipDirection:"top"},a.nodeClass="node-label node-"+a.node.type+" node-"+a.id,a.isExpandedView=!1,a.isActive=!1,a.whenMouseEnter=function(){console.log("mouse Entered")},a.whenMouseLeave=function(){console.log("mouse leaved")},a.togglePinnedMode=function(){a.isPinnedNode=!0,console.log(a.isPinnedNode)},a.makeCallBack=function(e){console.log(e),t.$parent.vm.makeCallBack(e,a.node)},a.makeNodeActive=function(){l(),a.isActive=!0},a.getDisplayName=function(e){return a.node[a.nodeDisplayProps[e]]};angular.element(r.children()[0]);n.on("click",c),t.$on("$destroy",function(){n.off("click",c)})}}}}function t(){}e.$inject=["treeViewService","$document","$rootScope"],angular.module("orgChart").directive("treeNode",e)}(),function(){"use strict";function e(e,n,o,r,i,a,l){return{replace:"false",templateNamespace:"svg",restrict:"E",scope:{},bindToController:{data:"=",abn:"&",del:"&",add:"&",edit:"&",fetchSearchableList:"&",nodeActions:"@",treedata:"=",searchableList:"=",imagePresent:"=",actionBarPresent:"=",nodeDisplayProps:"@"},controller:t,controllerAs:"vm",link:{pre:function(t,c,s,d){function u(){m(),h()}function h(){t.$watch(function(){return a.isExpandAllMode()},function(e){e?f():g()})}function f(){p(.5),a.setZoomScale(.5),K(),T()}function g(){p(1),a.setZoomScale(1),K(),E()}function m(){t.$watch(function(){return r.getSearchedNode()},function(e){if(console.log(e),e){L(e);var t=J(e);W(),i(function(){console.log(t.x,t.y),G(),Y(t.id),q(t)},500)}})}function p(e){var t={x:0,y:0,k:e};U([t.x,t.y],t.k)}function v(e,t){ye=e,d3.select(t).select(".ghost-area").attr("pointer-events","none"),d3.selectAll(".ghost-area").attr("class","ghost-area show"),d3.select(t).attr("class","node active-drag"),Be.selectAll("g.node").sort(function(e,t){return e.id!=ye.id?1:-1}),te.length>1&&(ae=Ie.links(te),le=Be.selectAll("path.link").data(ae,function(e){return e.target.id}).remove(),ce=Be.selectAll("g.node").data(te,function(e){return e.id}).filter(function(e,t){return e.id!=ye.id}).remove()),se=Ie.links(Ie.nodes(ye.parent)),Be.selectAll("path.link").filter(function(e,t){return e.target.id==ye.id}).remove(),ve=null}function x(e,t){var n,o,r,i=we;re&&(clearTimeout(re),ie=d3.transform(Be.attr("transform")),"left"==t||"right"==t?(n="left"==t?ie.translate[0]+i:ie.translate[0]-i,o=ie.translate[1]):"up"!=t&&"down"!=t||(n=ie.translate[0],o="up"==t?ie.translate[1]+i:ie.translate[1]-i),ie.scale[0],ie.scale[1],r=a.getZoomScale(),Be.transition().attr("transform","translate("+n+","+o+")scale("+r+")"),d3.select(e).select("g.node").attr("transform","translate("+n+","+o+")"),Ne.scale(r),Ne.translate([n,o]),re=setTimeout(function(){x(e,i,t)},50))}function y(){var e=[];if(null!==ye&&null!==xe){var t=d.imagePresent?5:50;e=[{source:{x:xe.x0+12+pe.width/2,y:xe.y0+50+pe.height+10},target:{x:ye.x0+12+pe.width/2,y:ye.y0+t}}]}var n=Be.selectAll(".temp-link").data(e);n.enter().append("path").attr("class","temp-link").attr("d",d3.svg.diagonal()).attr("pointer-events","none"),n.attr("d",d3.svg.diagonal()),n.exit().remove()}function w(){xe=null,d3.selectAll(".ghost-area").attr("class","ghost-area"),d3.select(ne).attr("class","node"),d3.select(ne).select(".ghost-area").attr("pointer-events",""),y(),null!==ye&&(b(),C(me),q(ye),ye=null)}function b(){var e={target:xe,source:ye};o.$broadcast("app:nodes:re-arranged",e)}function k(e){e.children&&(e.children.forEach(k),P(e))}function S(e){var t=e.children?e.children:e._children;e._children&&(e.children=e._children,e._children=null),t&&t.forEach(S)}function A(e){var t=e.children?e.children:e._children;e.children&&(e._children=e.children,e.children=null),t&&t.forEach(A)}function T(){S(me),C(me)}function E(){A(me),C(me)}function C(e){var o=d3.event&&d3.event.altKey?5e3:500,i=Ie.nodes(me).reverse();i.forEach(function(e){e.weight?e.y=12*e.weight+300*e.depth:e.y=300*e.depth});var a=Be.selectAll("g.node").data(i,function(e){return e.id||(e.id=++$e)}),l=a.enter().append("svg:g").call(ge).attr("class","node").attr("id",function(e){return"node-"+e.id}).attr("transform",function(t){return"translate("+e.x0+","+e.y0+")"}).on("click",function(e){d3.event.defaultPrevented||(P(e),C(e))});l.append("rect").attr("class","ghost-area").attr("width",pe.width).attr("height",pe.height+250).attr("opacity",.2).style("fill","transparent").attr("pointer-events","mouseover").on("mouseover",function(e){Me(e)}).on("mouseout",function(e){_e(e)}),l.append("tree-node").attr("node",function(e){return r.pushNode(e),""}).on("click",Z).attr("nodeId",function(e){return e.id}).attr("imagePresent",function(e){return d.imagePresent}).attr("actionBarPresent",function(e){return d.actionBarPresent}).attr("nodeDisplayProps",function(e){return d.nodeDisplayProps}).attr("isPinnedNode","false").attr("nodeActions",s.nodeactions).each(function(){n(this)(t)}),a.transition().duration(o).attr("transform",function(e){return"translate("+e.x+","+e.y+")"});var c=a.exit().transition().duration(o).attr("transform",function(t){return"translate("+e.x+","+e.y+")"}).remove();c.select("circle").attr("r",1e-6),c.select("text").style("fill-opacity",1e-6);var u=Be.selectAll("path.link").data(Ie.links(i),function(e){return e.target.id});u.enter().insert("svg:path","g").attr("class","link").attr("d",function(t){var n={x:e.x0,y:e.y0};return Oe({source:n,target:n})}).transition().duration(o).attr("d",M),u.transition().duration(o).attr("d",M).style("stroke",function(e){if("highlight-link"===e.target.class)return this.parentNode.appendChild(this),"#ff4136"}),u.exit().transition().duration(0).attr("d",function(t){var n={x:e.x,y:e.y};return Oe({source:n,target:n})}).remove(),i.forEach(function(e){e.x0=e.x,e.y0=e.y}),angular.copy(i,be),r.setNodes(be)}function P(e){e.children?(e._children=e.children,e.children=null):(e.children=e._children,e._children=null)}function N(e){return e.source.children.length>1&&e.source.children[0]==e.target?"onleft":e.source.children.length>1&&e.source.children[e.source.children.length-1]==e.target?"onright":"straight"}function M(e){var t=N(e),n="",o=d.imagePresent?5:50;switch(t){case"straight":n+="M"+(e.source.x+pe.width/2+12)+","+(e.source.y+pe.height+57)+"V"+(e.source.y+pe.height+pe.height/2+35)+"H"+(e.target.x+12+pe.width/2)+"V"+(e.target.y+o)+"M"+e.target.x+"12,"+(e.target.y+o);break;case"onleft":n+="M"+(e.source.x+pe.width/2+12)+","+(e.source.y+pe.height+57)+"V"+(e.source.y+pe.height+pe.height/2+35)+"H"+(e.target.x+12+pe.width/2+8)+" Q "+(e.target.x+12+pe.width/2-8+8)+","+(e.source.y+pe.height+pe.height/2+35)+" "+(e.target.x+12+pe.width/2-8+8)+","+(e.source.y+pe.height+pe.height/2+8+35)+"V"+(e.target.y+o)+"M"+e.target.x+"12,"+(e.target.y+o);break;case"onright":n+="M"+(e.source.x+12+pe.width/2)+","+(e.source.y+pe.height+57)+"V"+(e.source.y+pe.height+pe.height/2+35)+"H"+(e.target.x+12+pe.width/2-8)+" Q "+(e.target.x+12+pe.width/2)+","+(e.source.y+pe.height+pe.height/2+35)+" "+(e.target.x+12+pe.width/2)+","+(e.source.y+pe.height+pe.height/2+8+35)+"V"+(e.target.y+o)+"M"+e.target.x+"12,"+(e.target.y+o)}return n}function _(e,t){Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,9),z(e.id,t)}function B(e){var t=e.parent.children.indexOf(e);t>-1&&e.parent.children.splice(t,1),I(me.children,e),C(e.parent)}function I(e,t){angular.forEach(e,function(n,o){if(t.id==n.id){var r=e.indexOf(n);r>-1&&e.splice(r,1)}else angular.isDefined(n.children)&&null!==n.children&&I(n.children,t)})}function O(e,t){angular.forEach(e,function(n,o){if(t.id==n.id){var r=e.indexOf(n);r>-1&&(e[r].name=t.name)}else angular.isDefined(n.children)&&null!==n.children&&I(n.children,t)})}function z(e,t){var n=d3.select("#node-"+e).datum();void 0===n.children&&void 0===n._children?n.children=[t]:null!=n._children?(n._children.push(t),P(n)):null!=n.children?n.children.push(t):null==n._children&&(n._children=[],n._children.push(t),P(n)),C(n)}function D(){d.fetchSearchableList()}function Z(e){d3.event.defaultPrevented||(console.log(e),Q(this)||q(e))}function L(e){var t=H(d.treedata,e.name,[]);angular.isDefined(t)?(j(Pe),V(t)):console.log("Searched node "+e.name+" not found"),Pe=t}function V(e){angular.forEach(e,function(e,t){e.class="highlight-link",e._children&&(e.children=e._children,e._children=null),C(e)})}function j(e){angular.forEach(e,function(e,t){e.class="",e._children&&(e.children=e._children,e._children=null),C(e)})}function H(e,t,n){if(e.name===t)return n.push(e),n;if(!e.children&&!e._children)return!1;for(var o=e.children?e.children:e._children,r=0;r<o.length;r++){n.push(e);var i=H(o[r],t,n);if(i)return i;n.pop()}}function Q(e){var t=!1;return ze.node()===e&&(t=W()),!!t||(ze.classed("active",!1),ze=d3.select(e).classed("active",!0),!1)}function q(e){var t=a.getZoomScale(),n=[-t*e.x,-t*e.y];console.log("node",e),console.log("node translate ",n),Be.transition().duration(1250).call(Ne.translate(n).scale(t).event)}function W(){return console.log("Resetting Active nodes"),ze.classed("active",!1),ze=d3.select(null),!0}function J(t){return e("filter")(be,{id:t.id},!0)[0]}function F(t){return e("filter")(be,{id:t},!0)[0]}function K(){R(0,0)}function R(e,t){Be.transition().duration(1e3).delay(100).attr("transform",function(n){return"translate("+e+","+t+")scale("+a.getZoomScale()+")"})}function Y(e){var t=d3.selectAll(".node-"+e.toString());angular.element(t[0]).find("img").addClass("active-node")}function G(){var e=d3.selectAll(".node-label");angular.forEach(e,function(e,t){angular.element(e).find("img").removeClass("active-node")})}function U(e,t){return d3.transition().duration(250).tween("wheel.zoom",function(){var n=d3.interpolate(Ne.translate(),e),o=d3.interpolate(Ne.scale(),t);return function(e){Ne.scale(o(e)).translate(n(e)),ee()}})}function X(e){var t=1,n=1,o=[Se/2,Te/2],r=Ne.scaleExtent(),i=Ne.translate(),a=[],l=[],c={x:i[0],y:i[1],k:Ne.scale()};if(t="increment"===e?1:-1,(n=Ne.scale()*(1+.2*t))<r[0]||n>r[1])return!1;a=[(o[0]-c.x)/c.k,(o[1]-c.y)/c.k],c.k=n,l=[a[0]*c.k+c.x,a[1]*c.k+c.y],c.x+=o[0]-l[0],c.y+=o[1]-l[1],U(Ne.translate(),c.k)}function ee(){console.log(Ne.scale()),a.setZoomScale(Ne.scale()),Be.attr("transform","translate("+Ne.translate()+")scale("+a.getZoomScale()+")"),Be.selectAll("g.parent").attr("transform",function(e){return"translate("+e.x+","+e.y+")scale("+a.getZoomScale()+")"})}var te,ne,oe,re,ie,ae,le,ce,se,de,ue,he,fe,ge,me,pe={width:240,height:146,horizontalSeperation:16,verticalSeperation:128},ve=!1,xe=null,ye=null,we=200,be=[],ke=[20,20,20,20],Se=l.innerWidth-20-ke[1]-ke[3],Ae=l.innerHeight,Te=600-ke[0]-ke[2],$e=0,Ee=(d3.scale.linear().domain([0,Se]).range([0,Se]),d3.scale.linear().domain([0,Te]).range([0,Te]),"0 0 "+Se+" "+Ae),Ce=d3.select(c[0]),Pe=[],Ne=d3.behavior.zoom().translate([0,0]).scale(a.getZoomScale()).scaleExtent([.3,8]).on("zoom",ee);d.wordTrimOptions={word:"d",from:"0",until:"12",toolTip:"true",toolTipDirection:"top"},c.append(n("<div class='component-container'><div layout=\"row\" layout-align=\"space-around center\"><div flex><tree-search-box searchable-list='vm.searchableList'></tree-search-box></div><div flex><tree-tool-set zoom-trigger-call-back='vm.zoomTrigger(status)'></tree-tool-set></div></div></div>")(t)),d.zoomTrigger=function(e){console.log(e),X(e)},de=t.$on("app:nodes:clearactive",function(e,t){G()}),ue=t.$on("app:nodes:delete",function(e,t){console.log(t),B(F(t.nodeID)),D()}),he=t.$on("app:nodes:add::after",function(e,t){_(F(t.parentNode.id),t.lastAddedNode),D()}),fe=t.$on("app:nodes:update::after",function(e,t){O(me.children,t.lastEditedNode),D()}),ge=d3.behavior.drag().on("dragstart",function(e){e!=me&&(ve=!0,te=Ie.nodes(e),d3.event.sourceEvent.stopPropagation())}).on("drag",function(e){if(e!=me){if(ve&&v(e,ne=this),(oe=d3.mouse($("svg").get(0)))[0]<20)re=!0,x(this,"left");else if(oe[0]>$("svg").width()-20)re=!0,x(this,"right");else if(oe[1]<20)re=!0,x(this,"up");else if(oe[1]>$("svg").height()-20)re=!0,x(this,"down");else try{clearTimeout(re)}catch(e){console.error(e)}e.x0+=d3.event.dx,e.y0+=d3.event.dy,d3.select(this).attr("transform","translate("+e.x0+","+e.y0+")"),y()}}).on("dragend",function(e){if(e!=me)if(ne=this,xe){var t=ye.parent.children.indexOf(ye);t>-1&&ye.parent.children.splice(t,1),void 0!==xe.children||void 0!==xe._children?void 0!==xe.children?xe.children.push(ye):xe._children.push(ye):(xe.children=[],xe.children.push(ye)),w()}else w()});var Me=function(e){xe=e,y()},_e=function(e){xe=null,y()};u();var Be=Ce.append("div").attr("layout","row").attr("layout-align","space-around center").append("div").attr("flex","").attr("id","svg-box-container").call(function(){}).append("svg").attr("id","svgBox").attr("viewBox",Ee).attr("style","cursor:move;").attr("width","100%").attr("height",Ae).call(Ne).append("svg:g").attr("transform","translate("+(l.innerWidth/2-120)+","+Te/4+")").attr("style","cursor:pointer;").on("click",function(){d3.event.stopPropagation()},!1).call(d3.behavior.drag().on("dragstart",function(){}).on("drag",function(){})).append("g").attr("width",160).attr("height",120).attr("class","tree-holder");d3.selection.prototype.moveToFront=function(){return this.each(function(){this.parentNode.appendChild(this)})};var Ie=d3.layout.tree().nodeSize([pe.width+pe.horizontalSeperation,pe.height+pe.verticalSeperation]).separation(function(e,t){return e.parent==t.parent?1.25:1.5}),Oe=d3.svg.diagonal().source(function(e){return{x:e.source.x+pe.width/2,y:e.source.y+(pe.height+10)}}).target(function(e){return{x:e.target.x+pe.width/2,y:e.target.y-("true"==d.imagePresent?45:0)}}).projection(function(e){return[e.x+0,e.y+0]});(me=d.treedata).x0=Te/2,me.y0=0,console.log(me),me.children.forEach(k),C(me);var ze=d3.select(null);t.$on("$destroy",function(){de(),ue(),he(),fe()})}}}}function t(e){var t=this;t.makeCallBack=function(t,n){e.vm[t]({node:n})},console.log(t.searchableList)}e.$inject=["$filter","$compile","$rootScope","treeViewService","$timeout","toolSetService","$window"],t.$inject=["$scope"],angular.module("orgChart").directive("treeView",e)}(),function(){"use strict";function e(e){var t=null,n=[];return{setSearchedNode:function(e){t=e},getSearchedNode:function(){return t},setNodes:function(e){n=e},pushNode:function(e){n.push(e)},getNodes:function(){return n},findById:function(t){return e("filter")(n,{id:t},!0)[0]}}}e.$inject=["$filter"],angular.module("orgChart").factory("treeViewService",e)}(),function(){"use strict";function e(){}angular.module("orgChart").directive("trimWord",function(){return{restrict:"E",template:'<span ng-bind="vm.parsedText"><md-tooltip ng-if="vm.isToolTipNeed()" md-direction="vm.wordOptions.toolTipDirection">{{::vm.word}}</md-tooltip></span>',scope:{},controller:e,controllerAs:"vm",link:function(e,t,n,o){function r(){e.$watch(angular.bind(o,function(){return o.word}),function(e){console.log("word change to "+e),a()})}function i(){var e=parseInt(o.wordOptions.from),t=parseInt(o.wordOptions.until);return o.word.substring(e,t)}function a(){o.parsedText=i(),o.word.length>parseInt(o.wordOptions.until)?o.parsedText=o.parsedText.concat(" ..."):o.parsedText}o.isToolTipNeed=function(){return"true"==o.wordOptions.toolTip},r(),a()},bindToController:{wordOptions:"=",word:"="}}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
